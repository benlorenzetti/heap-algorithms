#include <string>
#include <cassert>
#include <iostream>
using namespace std;

/* Defines two complementary, portable unsigned integer classes,
 * whole numbers W = {0, 1, 2..., N-1} and natural numbers
 * N = {1, 2, 3..., N}, where N = 2^width.
 *
 * Both are represented in a datum of specified width in bits,
 * and the Natural representation is the 2's complement of the
 * usual Whole, unsigned integers. For width = 4:
 *
 *         (0)1001 =  Whole 9  =    + (8 + 1)
 *         (1)0111 = Natural 9 = 16 - (4 + 2 + 1)
*/

template<class W1, class W2>
W1 operator&(W1 w1, W2 w2) { return w1.AND(w2.datum); }

template<class W1, class W2>
W1 operator|(W1 w1, W2 w2) { return w1.OR(w2.datum); }

template<class W>
W operator~(W w) { return w.INV(); }

template<class W>
W operator++(W w) { return w.INC(); }

template<class W>
W operator--(W w) { return w.DEC(); }

template<class W1, class W2>
W1 operator+(W1 w1, W2 w2) { return w1.ADD(w2.datum); }

template<class W>
W operator-(W w) { return (~w + 1); }

template<class W1, class W2>
W1 operator-(W1 w1, W2 w2) { return w1 +(-w2); }

template<class W1, class W2>
W1 operator*(W1 w1, W2 w2) { return w1.MUL(w2.datum); }



template<typename U, int n>
class W {
 public:
  U datum;
  W() {}
  W(U x) { datum=x & ((1<<n)/2-1); }
  constexpr U MASK() { U mask = (1<<n)/2-1; return mask; }
  W<U, n> INV() { datum=(~datum) & MASK(); return *this; }
  W<U, n> ROTATE_L(U dist) { datum=(datum<<dist) & MASK(); return *this;}
  W<U, n> ROTATE_R(U dist) { datum=(datum>>dist); return *this;}
  W<U, n> AND(U x) { datum=datum&x&MASK(); return *this; }
  W<U, n> OR(U x) { datum=(datum|x)&MASK(); return *this; }
  W<U, n> ADD(U x) { datum=(datum+x)&MASK(); return *this; }
  W<U, n> INC() { return this->ADD(1); }
  W<U, n> DEC() { return this->ADD(-1); }
  W<U, n> MUL(U x) { datum=(datum*x)&MASK(); return *this; }
  string print() const;
  template<typename U2, int n2>
  friend ostream& operator<<(ostream&, const W<U2, n2>&);
};

template<typename U, int n>
string W<U, n>::print() const {
  string s;
  W<U, n> w = *this;
  do {
    char c = '0' + w.datum % 10;
    w.datum /= 10;
    s.insert(s.begin(), c);
  } while (w.datum);
  return s;
}

template<typename U, int n>
ostream& operator<<(ostream& os, const W<U, n>& w) {
  os << w.print();
  return os;
}
